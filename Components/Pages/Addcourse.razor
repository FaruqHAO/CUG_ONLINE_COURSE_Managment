@page "/Addcourse"
@rendermode InteractiveServer

@using CUG_ONLINE_COURSES.Data
@using CUG_ONLINE_COURSES.Models
@using CUG_ONLINE_COURSES.Services.RolesServices
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@attribute [Authorize(Roles = $"{AuthenticationInitalData.SuperAdminRole}")]

@inject IRoleService _roleManagerService
@inject NavigationManager Navigation

<PageTitle>Add Course</PageTitle>
<h3>Addcourse</h3>
@if (Lecturers == null)
{
    <p><em>Loading...</em></p>
}else
{
    <Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<EditForm Model="NewCourse" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Course Code</label>
        <InputText class="form-control" @bind-Value="NewCourse.CourseCode" placeholder="Course Code" />
        <ValidationMessage For="@(() => NewCourse.CourseCode)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Course Name</label>
            <InputText class="form-control" @bind-Value="NewCourse.CourseName" placeholder="Course Name" />
        <ValidationMessage For="@(() => NewCourse.CourseName)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Faculty</label>
        <InputSelect class="form-control" @bind-Value="NewCourse.Faculty">
            <option value="">-- Select Faculty --</option>
            @foreach (var faculty in Faculties)
            {
                <option value="@faculty">@faculty</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewCourse.Faculty)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Assigned Lecturer</label>
        <InputSelect class="form-control" @bind-Value="NewCourse.AssignedLecturer">
            <option value="">-- Select Lecturer --</option>
            @foreach (var lecturer in Lecturers)
            {
                <option value="@lecturer.AdminID">@lecturer.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => NewCourse.AssignedLecturer)" />
    </div>

        <div class="mb-3">
            <label class="form-label">Course Duration</label>
            <InputSelect class="form-control" @bind-Value="NewCourse.CourseDuration">
                <option value="">-- Select Duration --</option>
                <option value="10 weeks">10 Weeks</option>
                <option value="1 semester">1 Semester</option>
                <option value="6 months">6 Months</option>
                <option value="1 year">1 Year</option>
              </InputSelect>
            <ValidationMessage For="@(() => NewCourse.CourseDuration)" />
        </div>
       

    <button type="submit" class="btn btn-primary">Save Course</button>
</EditForm>
}

@code {
    private Course NewCourse = new Course();

    List<Admin> Lecturers;
    private bool PageLoading;
    protected override async Task OnInitializedAsync()
    {
        PageLoading = true;
        await Task.Delay(100);
        Lecturers = await _roleManagerService.GetAllStaff();
        PageLoading = false;
        ShowMessage(ToastType.Success, $"Staff Data Retirved successfully!");
    }

    private List<string> Faculties = new List<string>
    {
        "CEMs", "Nursing", "Education", "RS","EBA",
    };
    private async void HandleValidSubmit()
    {
       
        var response = await _roleManagerService.AddCourse(NewCourse);
        if (response == true)
        {
            ShowMessage(ToastType.Success, $"Course Data Added successfully!");
            // Redirect after a short delay
            await Task.Delay(1500);
            // Redirect after saving
             Navigation.NavigateTo("/coursemanager"); // Change to actual course list page

        }
        else
        {
            ShowMessage(ToastType.Danger, $"Course Added was unsuccessfully!");

            // Save to database or perform any action
            Console.WriteLine($"Course: {NewCourse.CourseName}, Faculty: {NewCourse.Faculty}, Lecturer: {NewCourse.AssignedLecturer}");

        }
        

        // Redirect after saving
       // Navigation.NavigateTo("/coursemanager"); // Change to actual course list page
    }
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string Alretmessage) => messages.Add(CreateToastMessage(toastType, Alretmessage));

    private ToastMessage CreateToastMessage(ToastType toastType, string Alretmessage)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notice",
            HelpText = $"{DateTime.Now}",
            Message = $"{Alretmessage}: {DateTime.Now}",
        };

    
}